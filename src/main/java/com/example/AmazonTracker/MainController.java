package com.example.AmazonTracker;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.io.FileOutputStream;
import org.jsoup.nodes.Document;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import org.springframework.ui.Model;
import org.jsoup.*;
import org.jsoup.nodes.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.mail.internet.MimeMessage;
import java.io.File;
import java.util.concurrent.TimeUnit;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    @Autowired
    private JavaMailSender javaMailSender;
    @Value("${toSend}")
    private String toSend;
    @PostMapping(path="/add") // Map ONLY POST Requests
    public String addNewUser (@RequestParam String url, RedirectAttributes redirAttrs) {//learn to send this through the body and not the parmas
        // @RequestParam means it is a parameter from the GET or POST request
        if(validateURL(url)) { //TODO add a separate method here to check for duplicates
            redirAttrs.addFlashAttribute("message", "Website is invalid");
            return "redirect:/demo/greet";
        }
        //TODO check if URL is too long

        String title = null;
        double price = -1;
        String imgURL = null;
        try {
            String userAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36";
            Document doc = Jsoup.connect(url)
                    .userAgent(userAgent)
                    .header("Accept-Language", "gzip, deflate, br")
                    .header("Accept-Encoding", "en-US,en;q=0.9")
                    .get();
            if(!soldByAmazon(doc)) {
                redirAttrs.addFlashAttribute("message", "Product MUST be sold by Amazon");
                return "redirect:/demo/greet";
            }
            title = findTitle(doc);
            price = findPrice(doc);
            imgURL = findImageURL(doc);//amazon url
            if(title == null || price == -1 || imgURL == null) {
                File logs = new File("logs.txt");
                FileWriter output = new FileWriter(logs,true);
                output.write(url);
                output.write(": title,price, or image cannot be found\n");
                output.close();
                redirAttrs.addFlashAttribute("message", "Image/price/title cannot be found");
                return "redirect:/demo/greet";
            }
        }
        catch(FileNotFoundException e) { //doc
            e.printStackTrace();
            redirAttrs.addFlashAttribute("message", "File Not found Exception");
            return "redirect:/demo/greet";
        }
        catch(IOException e) {
            e.printStackTrace();
            redirAttrs.addFlashAttribute("message", "IO Exception");
            return "redirect:/demo/greet";
        }


        User n = new User();
        n.setTitle(title);
        n.setPrice(price);
        n.setUrl(url);
        userRepository.save(n); //this will make n have an unique id, and help correspond image naming
        storeAndSave(n.getId(), imgURL); //Prevent hotlinking
        userRepository.save(n);//update and save

        return "redirect:/demo/greet";
    }
    @PostMapping(path = "/delete")
     public String delete(@RequestParam String id, RedirectAttributes redirAttrs) {
        int deleteId = 0;
        try {
            deleteId = Integer.parseInt(id);
        }
        catch(NumberFormatException ex) {
            redirAttrs.addFlashAttribute("message", "Invalid parameter");
            return "redirect:/demo/greet";
        }
        if(userRepository.findById(deleteId) == null) {
            redirAttrs.addFlashAttribute("message", "This Entry does not exist");
            return "redirect:/demo/greet";
        }
        userRepository.deleteById(deleteId);
        return "redirect:/demo/greet";
    }

    @GetMapping(path="/world")
    public @ResponseBody Iterable<User> world() { //STRICTLY FOR TESTING
        return userRepository.findAll();
    } // THIS IS PURELY TESTING
    @GetMapping(path="/greet")
    public String greeting(@RequestParam(name="name", required=false, defaultValue="World") String name, Model model) {
        model.addAttribute("name", name); //add this to templates
        model.addAttribute("allData",userRepository.findAll());
        //add all database stuff to add Attribute
        return "demo"; //go to template name
    }
    @Scheduled(fixedRate = 25000) //uncomment this to test this
    public void sendMessage() {//THIS IS PURELY FOR TESTING PURPOSES

        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(toSend);
        message.setSubject("subject");
        message.setText("Hello world");
        javaMailSender.send(message);

    }
    //@Scheduled(cron = "0 0 8 * *")// every day at 8
    public void scheduledWebCall() {
        Iterable<User> i = userRepository.findAll();
        for(User u : i) {
            //delay after x time to prevent getting banned
            try {
                TimeUnit.MINUTES.sleep(5);// change timeout
                String userAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36";
                Document doc = Jsoup.connect(u.getUrl())
                        .userAgent(userAgent)
                        .header("Accept-Language", "gzip, deflate, br")
                        .header("Accept-Encoding", "en-US,en;q=0.9")
                        .get();
                if(findPrice(doc) < u.getPrice()) {
                    MimeMessage msg = javaMailSender.createMimeMessage();
                    MimeMessageHelper helper = new MimeMessageHelper(msg, true);
                    helper.setSubject("SALE!!");
                    helper.setText("<a href = '" + u.getUrl() + "'>" + u.getTitle() + "</a>");
                    javaMailSender.send(msg);
                }
                //do nothing
            }
            catch(Exception ex) {

            }

        }

    }
    public boolean soldByAmazon(Document doc) {
        Element isAmazon = doc.select("#tabular-buybox > div.tabular-buybox-container > div:nth-child(4) > div > span").first();
        if(isAmazon == null) {
            //add more methods if sold by amazon but not recognized
            return false;//not sold by Amazon
        }
        else if (isAmazon.text().toLowerCase().contains("amazon.com")) {
            return true; //good
        }
        return false; // found but not sold by amazon

    }
    public String findImageURL(Document doc) {
        Element imgURL = doc.select("#landingImage").first();
        if(imgURL == null) {
            imgURL = doc.select("#imgBlkFront").first();
            if(imgURL == null) {
                return null;
            }
            return imgURL.absUrl("src");
        }
        return imgURL.absUrl("src");
    }
    public String findTitle(Document doc){
        Element productTitle = doc.getElementById("productTitle");
        if(productTitle == null) {
            //try new method of finding product title, also if problem occurs then keep a log of it
            return null;
        }
        return productTitle.text();
    }
    public double findPrice(Document doc) {
        Element price = doc.getElementById("price");//jujutsu kaisen manga
        if(price == null) {
            price = doc.select("#corePrice_feature_div > div > span > span:nth-child(2)").first(); // you have to the right to remain innocent
            if(price == null) {
                price = doc.select("#corePrice_feature_div > div > span.a-price.a-text-price.header-price.a-size-base.a-text-normal.a-color-price > span:nth-child(2)").first(); // one-time purchase
                if(price == null) {
                    return -1; //if nothing else works
                }
                double sPrice = Double.parseDouble(price.text().substring(1));
                return sPrice;
            }
            double sPrice = Double.parseDouble(price.text().substring(1));
            return sPrice;
            //try more methods
        }
        double sPrice = Double.parseDouble(price.text().substring(1));
        return sPrice;
    }
    public boolean validateURL(String url) {
        if(!url.contains("amazon.com")) {//validate website, must be Amazon
            try {
                File logs = new File("logs.txt");
                FileWriter output = new FileWriter(logs,true);
                output.write(url);
                output.write(": Url is invalid\n");
                output.close();
            }
            catch(Exception e) {
                e.printStackTrace();
            }
            return true;
        }
        return false;
    }
    public boolean isCopy(String url) { //TODO learn to find specific column value in database
        return false;
    }
    public void storeAndSave(long id, String imgURL) {//id comes from the new User, this will give it a unique name
        try {
            String destinationFile = "src/main/resources/static/images/" + id + ".jpg";
            URL url = new URL(imgURL);
            InputStream is = url.openStream();
            OutputStream os = new FileOutputStream(destinationFile);

            byte[] b = new byte[2048];
            int length;

            while ((length = is.read(b)) != -1) {
                os.write(b, 0, length);
            }

            is.close();
        }
        catch(Exception ex) {
            ex.printStackTrace();
        }
    }
    //delete function goes here. id will be passed through. contemplate the possibility of deleting images as well

}
